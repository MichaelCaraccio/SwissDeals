package ch.swissdeals;

import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;

import java.util.List;

import ch.swissdeals.database.controllers.DatabaseHelper;
import ch.swissdeals.database.models.ModelProviders;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link ProvidersListFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link ProvidersListFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class ProvidersListFragment extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String KEY_COLOR_THEME = "colorTheme";

    private OnFragmentInteractionListener mListener;
    private Context ctx;
    private ListView mListView;
    private DatabaseHelper db;
    private List<ModelProviders> listproviders;
    private DealsPopupAdapter mAdapter;
    private DealsPopupAdapter.ColorTheme colorTheme;

    public ProvidersListFragment() {
        this.colorTheme = DealsPopupAdapter.ColorTheme.BLUE;
    }


    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param colorTheme
     * @return A new instance of fragment ProvidersListFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static ProvidersListFragment newInstance(DealsPopupAdapter.ColorTheme colorTheme) {
        ProvidersListFragment fragment = new ProvidersListFragment();
        Bundle args = new Bundle();
        args.putSerializable(KEY_COLOR_THEME, colorTheme);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            this.colorTheme = (DealsPopupAdapter.ColorTheme) getArguments().get(KEY_COLOR_THEME);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        View v = inflater.inflate(R.layout.fragment_providers_list, container, false);
        this.ctx = getActivity().getApplicationContext();

        // Init the adapter
        mListView = (ListView) v.findViewById(R.id.popup_content_deal_list);

        // Get user's deals
        this.db = new DatabaseHelper(ctx);
        refreshProvidersList();

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                ModelProviders pro = listproviders.get(position);

                ImageView imageDownloadOrDelete = (ImageView) view.findViewById(R.id.popup_downloadOrDelete);  //replace with your ImageView id

                if (pro.isUserSubscribed()) {
                    pro.setUserSubscribed(false);
                    db.unsubscribeProvider(pro.getProvider_id());
                    imageDownloadOrDelete.setImageResource(R.mipmap.ic_download_white);
                } else {
                    pro.setUserSubscribed(true);
                    db.subscribeProvider(pro.getProvider_id());
                    imageDownloadOrDelete.setImageResource(R.mipmap.ic_remove);
                }

                mAdapter.notifyDataSetChanged();
            }
        });

        return v;
    }

    /*
    TODO Automatically generated by Android Studio.
    If in the future we need to fire event to the parent view (Activity or Fragment)
    we can use this observer pattern
    Rename method, update argument and hook method into UI event
     */
    // TODO:
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    public void updateListColorTheme(DealsPopupAdapter.ColorTheme colorTheme) {
        this.colorTheme = colorTheme;
        DealsPopupAdapter adapter = new DealsPopupAdapter(ctx, listproviders, this.colorTheme);
        mListView.setAdapter(adapter);
    }

    public void refreshProvidersList() {
        this.listproviders = db.getAllProviders();

        // Set the list in Adapter
        mAdapter = new DealsPopupAdapter(ctx, listproviders, colorTheme);
        mListView.setAdapter(mAdapter);

        mAdapter.notifyDataSetChanged();
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }
}
